#!/bin/bash

# yad hackery

if [ -z "$(which yad)" ]
then
	if [ -e "./bin/yad" ]
	then
		PATH="${PATH}:./bin"
	elif [ -e "../bin/yad" ]
	then
		PATH="${PATH}:../bin"
	fi
fi

# buttons

CANCEL_BTN=1
CLOSE_BTN=252
OK_BTN=0

# menu options

DEFAULT_TITLE="Genesi i.MX53 Hardware Tests"
DEFAULT_WIDTH=350
DEFAULT_HEIGHT=250
MAIN_MENU="--title=${DEFAULT_TITLE} --list --print-column=2 --column=icon:IMG --column=Test --column=Status --column=@fore@"
FEEDBACK_MENU="--title=${DEFAULT_TITLE} --width=${DEFAULT_WIDTH} --list --column=:RD --column=Status --column=Action:HD"

# general functions

yad_default_menu()
{
	yad --title="${DEFAULT_TITLE}" \
--width=${DEFAULT_WIDTH} --height=${DEFAULT_HEIGHT} "$@"
}

yad_default_feedback_menu()
{
	yad_default_menu --list \
--column=:RD --column=Status --column=Action:HD \
"$@"
}

yad_stat_menu()
{
	local stat=${1}

	yad --title="${DEFAULT_TITLE}" --width=${DEFAULT_WIDTH} \
--text=${stat}
}

txtmenu_from_file()
{
	local file=${1}
	local title=${2}

	if [ -z "${title}" ]
	then
		title="${DEFAULT_TITLE}"
	fi

	 yad --title="${title}" --text="$(cat ${file})"
}

ask_continue()
{
	local btn=$? # TODO UGLY!

	if close_menu ${btn}
	then
		exit 1
	fi
}

if_failure()
{
	local stat=${1}

	if [ "${stat}" = "Failure" ]
	then
		yad_default_menu \
--text="The previous test ended in failure. Would you like to continue?"
		return $?
	else
		return 0
	fi
}

progress_view_dummy()
{
	local ttime=${1}
	local opts="$@"

	for i in $(seq 1 $ttime)
	do
		sleep 1
		echo ""
	done | progress_view ${ttime} "" "" ${opts}
}

progress_view()
{
	local ttime=${1}
	local title=${2}
	local text=${3}
	
	shift 3

	local opts="$@"

	local start_time=${SECONDS}

    if [ -z "${title}" ]
    then
        title="${DEFAULT_TITLE}"
    fi

    if [ -z "${text}" ]
    then
        text="Test in progress. Please wait."
    fi

	while read line
	do
		if [ ! -z "${line}" ] # coming from dummy
		then
			echo "#${line}" | tee -a ./log # dirty but gets the job done
		fi

		echo "100 * (${SECONDS} - ${start_time}) / ${ttime}" | bc -l
	done | yad --title="${title}" --width=${DEFAULT_WIDTH} \
--progress --text="${text}" ${opts}
}

# when time unknown but on step complete can read from stdin
progress_view_steps()
{
	local steps=${1}
	local title=${2}
	local text=${3}
	
	shift 3

	local opts="$@"

	local start_time=${SECONDS}

    if [ -z "${title}" ]
    then
        title="${DEFAULT_TITLE}"
    fi

    if [ -z "${text}" ]
    then
        text="Test in progress. Please wait."
    fi

	for i in $(seq 1 ${steps})
	do
		read line
		#echo "#${line}" | cut -c 1-100 | tee -a ./log # still dirty, still working
		echo "100 * (${i} / ${steps})" | bc -l
	done | yad --title="${title}" --width=${DEFAULT_WIDTH} \
--progress --text="${text}" ${opts}
}

continue_after_failure()
{
	local stat=${1}
	local res=0

	if [ ${stat} = "Failure" ]
	then
	    res=$(yad_default_menu --text="The previoius test ended in failure. Would you like to continue?")
	fi

	return ${res}
}

# TODO not linked with the structure of FEEDBACK_MENU at all!
get_feedback_status()
{
	local result="${1}"

	echo $($(echo "${result}" | cut -d "|" -f3))
}

current_status()
{
	oldStat=${1}
	newStat=${2}

	if [ -z "${oldStat}" ]
	then
		echo ${newStat}
	elif [[ "$oldStat" = $newStat  ]]
	then
		echo $oldStat
	else
		echo "Mixed"
	fi
}

close_menu()
{
	btn=${1}

	if [ ${btn} -eq ${OK_BTN} ]
	then
		return 1
	else
		return 0
	fi
}

mk_menu_body()
{
	local file=${1}
	local process=${2}

	if [ -z "${process}" ]
	then
		process="echo"
	fi

	local accum_body=""
	local tmp=""

	while read line
	do
		tmp=$(${process} ${line})
		accum_body="${accum_body} ${tmp}"
	done < ${file}

	echo ${accum_body}
}

parse_item()
{
	local item_num="${1}"
	local menu_result="${2}"

	echo "${menu_result}" | cut -d"|" -f"${item_num}"
}

# logging
init_test_log()
{
	# bad form - implicitly takes logging directory as
	# current directory

	local logfile="$(pwd)/log"

	echo "----------------------------------------" >> ${logfile}
	date >> ${logfile}
	echo "Logging for test $(basename $(pwd))"      >> ${logfile}
}

log()
{
	local msg="${1}"
	local logfile="$(pwd)/log"

	echo -e $(date "+[%H:%M:%S] ${msg}") >> ${logfile}
}

log_default_feedback()
{
	local options_filename="${1}"

	local res=$(yad_default_feedback_menu --rest="${options_filename}")

	log "User feedback:\n${res}"
	echo "${res}"
}

log_default_describe_problem()
{
	local form_fields=""

	while [ ! $# -eq 0 ]
	do
		form_fields="${form_fields} --field=${1}:CHK FALSE"
		shift 1
	done

	local res=$(yad_default_menu \
--text="Please select the most appropriate" --form \
${form_fields} \
--field="Leave any additional comments below":TXT)

	log "\nUser asked to describe problem:"
	log "${form_fields}"
	log "${res}"
}

# main menu functions
config_main_menu_item()
{
	local hwtest=${1}
	local sstatus=${2}
	local icon=""
	local color=""

	case ${sstatus} in
		Incomplete)
			color="black"
			icon="none"
			;;
		Failure)
			color="red"
			icon="failure.png"
			;;
		Success)
			color="green"
			icon="success.png"
			;;
		Mixed)
			color="orange"
			icon="mixed.png"
			;;
		*)
			color="purple"
			icon="none"
			;;
	esac

	echo ${icon} ${hwtest} ${sstatus} ${color}
}

update_test_status()
{
	local testName=${1}
	local sstatus=${2}
	local fileName=${3}

	if [ -z "${sstatus}" ]
	then
		exit 0
	fi

	while read line
	do
		if [[ $line == ${testName}* ]]
		then
			echo "${testName} ${sstatus}" >> tmp_menu_file
		else
			echo "${line}" >> tmp_menu_file
		fi
	done < ${fileName}

	mv tmp_menu_file ${fileName}
}
